{"ast":null,"code":"// import getState from 'react';\nimport * as actionTypes from \"../actions\"; // interface Props {\n//     name: string;\n//     image: string;\n//     likes: number;\n// };\n\nconst initialState = {\n  posts: [{\n    name: \"name1\",\n    image: \"image1\",\n    desc: \"desc1\",\n    likes: 1\n  }, {\n    name: \"name2\",\n    image: \"image2\",\n    desc: \"desc2\",\n    likes: 2\n  }],\n  text: \"hello\"\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.INCREMENT:\n      return {};\n\n    case actionTypes.DECREMENT:\n      return { ///update state immutably. Don`t mutate old state, just pull old state and update\n        ...state\n      };\n\n    case actionTypes.ON_MOUNT:\n      return { ...state,\n        posts: action.array\n      };\n  }\n\n  return state;\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/Tao.S/Desktop/WebDev/MA/Front-end/src/store/reducers/reducer.tsx"],"names":["actionTypes","initialState","posts","name","image","desc","likes","text","rootReducer","state","action","type","INCREMENT","DECREMENT","ON_MOUNT","array"],"mappings":"AAAA;AACA,OAAO,KAAKA,WAAZ,MAA6B,YAA7B,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,CAAC;AAACC,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE,QAAvB;AAAiCC,IAAAA,IAAI,EAAE,OAAvC;AAAgDC,IAAAA,KAAK,EAAE;AAAvD,GAAD,EAA4D;AAACH,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE,QAAvB;AAAiCC,IAAAA,IAAI,EAAE,OAAvC;AAAgDC,IAAAA,KAAK,EAAE;AAAvD,GAA5D,CADU;AAEjBC,EAAAA,IAAI,EAAE;AAFW,CAArB;;AAMA,MAAMC,WAAW,GAAG,CAACC,KAAU,GAAGR,YAAd,EAA4BS,MAA5B,KAA4C;AAG5D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKX,WAAW,CAACY,SAAjB;AACI,aAAM,EAAN;;AAIJ,SAAKZ,WAAW,CAACa,SAAjB;AACI,aAAM,EACF;AACA,WAAGJ;AAFD,OAAN;;AAKJ,SAAKT,WAAW,CAACc,QAAjB;AACI,aAAO,EACH,GAAGL,KADA;AAEHP,QAAAA,KAAK,EAAEQ,MAAM,CAACK;AAFX,OAAP;AAbR;;AAmBA,SAAON,KAAP;AACH,CAvBD;;AA0BA,eAAeD,WAAf","sourcesContent":["// import getState from 'react';\nimport * as actionTypes from \"../actions\"\n\n// interface Props {\n//     name: string;\n//     image: string;\n//     likes: number;\n// };\n\nconst initialState = {\n    posts: [{name: \"name1\", image: \"image1\", desc: \"desc1\", likes: 1}, {name: \"name2\", image: \"image2\", desc: \"desc2\", likes: 2}],\n    text: \"hello\",\n};\n\n\nconst rootReducer = (state: any = initialState, action: any) => {\n\n\n    switch(action.type){\n        case actionTypes.INCREMENT:\n            return{\n              \n            };\n        \n        case actionTypes.DECREMENT:\n            return{\n                ///update state immutably. Don`t mutate old state, just pull old state and update\n                ...state,\n            };\n\n        case actionTypes.ON_MOUNT:\n            return {\n                ...state,\n                posts: action.array\n            };      \n    }\n\n    return state;\n}\n\n\nexport default rootReducer\n"]},"metadata":{},"sourceType":"module"}