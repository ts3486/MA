{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport axios from \"axios\"; // interface stateTypes {\n//     name: string;\n//     image: string;\n//     likes: number;\n// };\n\nconst initialState = {\n  posts: [{\n    name: \"name1\",\n    image: \"image1\",\n    likes: 1\n  }, {\n    name: \"name2\",\n    image: \"image2\",\n    likes: 2\n  }],\n  text: \"hello\"\n};\n\nconst rootReducer = (state = initialState, action) => {\n  _s();\n\n  useEffect(() => {\n    axios.get(\"http://127.0.0.1:8000/posts/posts/\").then(response => {\n      let posts = response.data; //putting the content in state\n\n      this.setState({\n        posts: posts\n      });\n    });\n  });\n\n  switch (action.type) {\n    case \"INCREMENT\":\n      return {};\n\n    case \"DECREMENT\":\n      return { ///update state immutably. Don`t mutate old state, just pull old state and update\n        ...state\n      };\n    // case \"STATE\":\n    //     return{\n    //         ...state,\n    //         newState: state = \n    //     };\n  }\n\n  return state;\n};\n\n_s(rootReducer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/Tao.S/Desktop/WebDev/MA/Front-end/src/store/reducer.tsx"],"names":["useEffect","axios","initialState","posts","name","image","likes","text","rootReducer","state","action","get","then","response","data","setState","type"],"mappings":";;AAAA,SAAeA,SAAf,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAIA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,CAAC;AAACC,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE,QAAvB;AAAiCC,IAAAA,KAAK,EAAE;AAAxC,GAAD,EAA6C;AAACF,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE,QAAvB;AAAiCC,IAAAA,KAAK,EAAE;AAAxC,GAA7C,CADU;AAEjBC,EAAAA,IAAI,EAAE;AAFW,CAArB;;AAMA,MAAMC,WAAqB,GAAG,CAACC,KAAU,GAAGP,YAAd,EAA4BQ,MAA5B,KAA4C;AAAA;;AAEtEV,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,KAAK,CAACU,GAAN,CAAU,oCAAV,EAAgDC,IAAhD,CAAsDC,QAAD,IAAc;AACnE,UAAIV,KAAsB,GAAGU,QAAQ,CAACC,IAAtC,CADmE,CAEnE;;AACA,WAAKC,QAAL,CAAc;AAACZ,QAAAA,KAAK,EAAEA;AAAR,OAAd;AACC,KAJD;AAKH,GANQ,CAAT;;AAWA,UAAOO,MAAM,CAACM,IAAd;AACI,SAAK,WAAL;AACI,aAAM,EAAN;;AAIJ,SAAK,WAAL;AACI,aAAM,EACF;AACA,WAAGP;AAFD,OAAN;AAKJ;AACA;AACA;AACA;AACA;AAhBJ;;AAqBA,SAAOA,KAAP;AACH,CAnCD;;GAAMD,W;;AAsCN,eAAeA,WAAf","sourcesContent":["import React, {useEffect} from 'react';\nimport axios from \"axios\";\n\n\n\n// interface stateTypes {\n//     name: string;\n//     image: string;\n//     likes: number;\n// };\n\nconst initialState = {\n    posts: [{name: \"name1\", image: \"image1\", likes: 1}, {name: \"name2\", image: \"image2\", likes: 2}],\n    text: \"hello\",\n};\n\n\nconst rootReducer: React.FC = (state: any = initialState, action: any) => {\n\n    useEffect(() => {\n        axios.get(\"http://127.0.0.1:8000/posts/posts/\").then((response) => {\n        let posts: string | number = response.data;\n        //putting the content in state\n        this.setState({posts: posts})\n        })\n    });\n\n\n\n\n    switch(action.type){\n        case \"INCREMENT\":\n            return{\n              \n            };\n        \n        case \"DECREMENT\":\n            return{\n                ///update state immutably. Don`t mutate old state, just pull old state and update\n                ...state,\n            };\n\n        // case \"STATE\":\n        //     return{\n        //         ...state,\n        //         newState: state = \n        //     };\n        \n        \n    }\n\n    return state;\n}\n\n\nexport default rootReducer\n"]},"metadata":{},"sourceType":"module"}