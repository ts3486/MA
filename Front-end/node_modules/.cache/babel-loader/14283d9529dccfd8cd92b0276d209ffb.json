{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Tao.S/Desktop/WebDev/MA/Front-end/src/Components/User/ProfileComponent.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useParams } from \"react-router\"; // import postsReducer from \"../../store/reducers/postsReducer\";\n\nimport { ProfileWrapper } from \"./ProfileCompoent_style\";\nexport const ProfileComponent = props => {\n  _s();\n\n  let {\n    username\n  } = useParams();\n  const [description, setDescription] = useState(\" \");\n  const userPosts = props.posts.filter(post => post.username === username);\n\n  const descriptionHandler = () => {\n    setDescription(description + \"123\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(ProfileWrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"username\",\n          children: username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"descButton\",\n          onClick: descriptionHandler,\n          children: \"Set Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"description\",\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-container\",\n          children: userPosts.map(post => {\n            var _post$filename, _post$filename2, _post$filename3, _post$filename4;\n\n            let content = null;\n\n            if ((_post$filename = post.filename) === null || _post$filename === void 0 ? void 0 : _post$filename.includes(\"jpg\")) {\n              content = /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"image\",\n                src: \"http://localhost:5000/posts/images/\" + post.filename,\n                alt: \"is it here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 44\n              }, this);\n            } else if ((_post$filename2 = post.filename) === null || _post$filename2 === void 0 ? void 0 : _post$filename2.includes(\"jpeg\")) {\n              content = /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"image\",\n                src: \"http://localhost:5000/posts/images/\" + post.filename,\n                alt: \"is it here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 44\n              }, this);\n            } else if ((_post$filename3 = post.filename) === null || _post$filename3 === void 0 ? void 0 : _post$filename3.includes(\"png\")) {\n              content = /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"image\",\n                src: \"http://localhost:5000/posts/images/\" + post.filename,\n                alt: \"is it here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 44\n              }, this);\n            } else if ((_post$filename4 = post.filename) === null || _post$filename4 === void 0 ? void 0 : _post$filename4.includes(\"mov\")) {\n              content = /*#__PURE__*/_jsxDEV(\"video\", {\n                className: \"image\",\n                src: \"http://localhost:5000/posts/images/\" + post.filename,\n                controls: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 45\n              }, this);\n            }\n\n            ;\n            return content;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProfileComponent, \"qs1qMiPruNVbpu7jnBL3VTQCBPg=\", false, function () {\n  return [useParams];\n});\n\n_c = ProfileComponent;\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.posts.posts,\n    auth: state.auth.user\n  };\n};\n\nexport default connect(mapStateToProps)(ProfileComponent); //problem is that the props loaded rn are the entire posts, although i want to filter only the users posts.\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileComponent\");","map":{"version":3,"sources":["/Users/Tao.S/Desktop/WebDev/MA/Front-end/src/Components/User/ProfileComponent.tsx"],"names":["React","useState","connect","useParams","ProfileWrapper","ProfileComponent","props","username","description","setDescription","userPosts","posts","filter","post","descriptionHandler","map","content","filename","includes","mapStateToProps","state","auth","user"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport {connect} from \"react-redux\";\nimport {useParams} from \"react-router\";\n// import postsReducer from \"../../store/reducers/postsReducer\";\nimport {ProfileWrapper} from \"./ProfileCompoent_style\";\n\ninterface Props {\n    username?: any;\n    description?: string;\n    posts?: any;\n}\n\n\nexport const ProfileComponent: React.FC<Props> = (props: any) => {\n\n\n    let {username} = useParams<any>();\n    const [description, setDescription] = useState(\" \");\n\n    const userPosts = props.posts.filter((post: any) => post.username ===  username)\n\n    const descriptionHandler = () => {\n        setDescription(description + \"123\")\n    }\n\n\n    return(\n    \n    <ProfileWrapper>\n        <div className=\"container\">\n            <div className=\"card\">\n                <h2 className=\"username\">{username}</h2>\n                <button className=\"descButton\" onClick={descriptionHandler}>Set Description</button>\n                <br></br>\n                <p className=\"description\">{description}</p>\n                    <div className=\"post-container\">\n                        {userPosts.map((post: any) => {\n\n                            let content = null; \n\n                            if (post.filename?.includes(\"jpg\")){\n                                content = (<img className=\"image\" src={\"http://localhost:5000/posts/images/\" + post.filename} alt=\"is it here\"></img>);\n                            }\n                            else if (post.filename?.includes(\"jpeg\")){\n                                content = (<img className=\"image\" src={\"http://localhost:5000/posts/images/\" + post.filename} alt=\"is it here\"></img>);\n                            }\n                            else if (post.filename?.includes(\"png\")){\n                                content = (<img className=\"image\" src={\"http://localhost:5000/posts/images/\" + post.filename} alt=\"is it here\"></img>);\n                            }\n                            else if (post.filename?.includes(\"mov\")){\n                                 content = (<video className=\"image\" src={\"http://localhost:5000/posts/images/\" + post.filename} controls></video>);\n                            };\n\n                            return content;\n                        })}\n                    </div>\n            </div>\n        </div>\n    </ProfileWrapper>\n\n    );\n};\n\nconst mapStateToProps = (state: any) => {\n    return{\n    posts: state.posts.posts,\n    auth: state.auth.user,\n    }\n}\n\nexport default connect(mapStateToProps)(ProfileComponent);\n\n//problem is that the props loaded rn are the entire posts, although i want to filter only the users posts."]},"metadata":{},"sourceType":"module"}