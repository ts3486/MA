{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Tao.S/Desktop/WebDev/MA/Front-end/src/Components/Login/SignupComponent.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Form, Input, Tooltip, Button } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons'; // import { registerUser } from '../../store/actions/auth_actions';\n\nimport * as actionTypes_auth from \"../../store/actions/auth_actions\";\n\nconst RegistrationForm = props => {\n  _s();\n\n  const [form] = Form.useForm();\n\n  const onFinish = values => {\n    let username = values.username;\n    let email = values.email;\n    let password = values.password;\n    let object = {\n      username,\n      email,\n      password\n    };\n    let jsonValues = JSON.stringify(object);\n    props.registerUser(jsonValues);\n    console.log(jsonValues); // props.history.push(\"/\");\n  }; // const handleSubmit = (e: any) => {\n  // e.preventDefault();\n  //   props.form.validateFields((err: any, values: any) => {\n  //   if(!err){\n  //       props.onAuth(\n  //           values.userName, \n  //           values.email,\n  //           values.password,\n  //           values.confirm);\n  //   }\n  // })\n  // after logged in, redirects you to the \"/\" page.\n  // props.history.push(\"/\");\n  // }; \n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      form: form,\n      name: \"register\",\n      onFinish: onFinish,\n      scrollToFirstError: true,\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"username\",\n        label: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Username\\xA0\", /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"What do you want others to call you?\",\n            children: /*#__PURE__*/_jsxDEV(QuestionCircleOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this),\n        rules: [{\n          required: true,\n          message: 'Please input your nickname!',\n          whitespace: true\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"email\",\n        label: \"E-mail\",\n        rules: [{\n          type: 'email',\n          message: 'The input is not valid E-mail!'\n        }, {\n          required: true,\n          message: 'Please input your E-mail!'\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"password\",\n        label: \"Password\",\n        rules: [{\n          required: true,\n          message: 'Please input your password!'\n        }],\n        hasFeedback: true,\n        children: /*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegistrationForm, \"rI7DrJIrFu7YmlGWYiMFTzs8jF0=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = RegistrationForm;\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    registerUser: (username, email, password) => dispatch(actionTypes_auth.registerUser(username, email, password)) // onAuth: (username: string, email: string, password1: any, password2: any) => dispatch(actionTypes_auth.authSignup(username, email, password1, password2)),\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"RegistrationForm\");","map":{"version":3,"sources":["/Users/Tao.S/Desktop/WebDev/MA/Front-end/src/Components/Login/SignupComponent.tsx"],"names":["React","connect","Form","Input","Tooltip","Button","QuestionCircleOutlined","actionTypes_auth","RegistrationForm","props","form","useForm","onFinish","values","username","email","password","object","jsonValues","JSON","stringify","registerUser","console","log","required","message","whitespace","type","mapStateToProps","state","loading","auth","error","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from \"react-redux\";\nimport {\n  Form,\n  Input,\n  Tooltip,\n  Button,\n} from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\n// import { registerUser } from '../../store/actions/auth_actions';\nimport * as actionTypes_auth from \"../../store/actions/auth_actions\";\n\n\n\nconst RegistrationForm = (props: any) => {\n  const [form] = Form.useForm();\n\n  const onFinish = (values: any) => {\n\n  let username  = values.username;\n  let email = values.email;\n  let password = values.password;\n  \n  let object = {username, email, password};\n\n    let jsonValues = JSON.stringify(object);\n    props.registerUser(jsonValues);\n    console.log(jsonValues);\n\n    // props.history.push(\"/\");\n  };\n\n\n  // const handleSubmit = (e: any) => {\n    // e.preventDefault();\n      //   props.form.validateFields((err: any, values: any) => {\n      //   if(!err){\n      //       props.onAuth(\n      //           values.userName, \n      //           values.email,\n      //           values.password,\n      //           values.confirm);\n      //   }\n      // })\n    // after logged in, redirects you to the \"/\" page.\n    // props.history.push(\"/\");\n  // }; \n \n  return (\n    <div>\n    <Form\n      form={form}\n      name=\"register\"\n      onFinish={onFinish}\n      scrollToFirstError\n    >\n\n    <Form.Item\n        name=\"username\"\n        label={\n          <span>\n            Username&nbsp;\n            <Tooltip title=\"What do you want others to call you?\">\n              <QuestionCircleOutlined />\n            </Tooltip>\n          </span>\n        }\n        rules={[\n          {\n            required: true,\n            message: 'Please input your nickname!',\n            whitespace: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"email\"\n        label=\"E-mail\"\n        rules={[\n          {\n            type: 'email',\n            message: 'The input is not valid E-mail!',\n          },\n          {\n            required: true,\n            message: 'Please input your E-mail!',\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"password\"\n        label=\"Password\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your password!',\n          },\n        ]}\n        hasFeedback\n      >\n        <Input.Password />\n      </Form.Item>\n\n      {/* <Form.Item\n        name=\"confirm\"\n        label=\"Confirm Password\"\n        dependencies={['password']}\n        hasFeedback\n        rules={[\n          {\n            required: true,\n            message: 'Please confirm your password!',\n          },\n          ({ getFieldValue }) => ({\n            validator(_, value) {\n              if (!value || getFieldValue('password') === value) {\n                return Promise.resolve();\n              }\n\n              return Promise.reject('The two passwords that you entered do not match!');\n            },\n          }),\n        ]}\n      >\n        <Input.Password />\n      </Form.Item> */}\n\n      {/* <Form.Item\n        name=\"agreement\"\n        valuePropName=\"checked\"\n        rules={[\n          {\n            validator: (_, value) =>\n              value ? Promise.resolve() : Promise.reject('Should accept agreement'),\n          },\n        ]}\n\n      >\n        <Checkbox>\n          I have read the <a href=\"documents\">agreement</a>\n        </Checkbox>\n      </Form.Item> */}\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Register\n        </Button>\n      </Form.Item>\n    </Form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n    return{\n        loading: state.auth.loading,\n        error: state.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return{\n      registerUser: (username:any, email:any, password:any) => dispatch(actionTypes_auth.registerUser(username, email, password))\n      // onAuth: (username: string, email: string, password1: any, password2: any) => dispatch(actionTypes_auth.authSignup(username, email, password1, password2)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationForm);\n\n"]},"metadata":{},"sourceType":"module"}