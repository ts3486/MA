{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Tao.S/Desktop/WebDev/MA/Front-end/src/Components/User/ProfileComponent.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { connect } from \"react-redux\";\nimport { useParams } from \"react-router\"; // import postsReducer from \"../../store/reducers/postsReducer\";\n\nimport { ProfileWrapper } from \"./ProfileCompoent_style\";\nexport const ProfileComponent = props => {\n  _s();\n\n  let {\n    username\n  } = useParams();\n  const [modalIsOpen, setModalState] = useState(false);\n  const [userName, setUsername] = useState(username);\n  const [description, setDescription] = useState(\"\");\n  const userPosts = props.posts.filter(post => post.username === username);\n  return /*#__PURE__*/_jsxDEV(ProfileWrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"username\",\n          children: userName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"descButton\",\n          onClick: e => setModalState(true),\n          children: \"Edit Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          isOpen: modalIsOpen,\n          onRequestClose: () => setModalState(false),\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"form\",\n            action: \"/upload\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"username\",\n              id: \"input\",\n              value: userName,\n              onChange: e => setUsername(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Description:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"description\",\n              id: \"input\",\n              value: description,\n              onChange: e => setDescription(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"submit\",\n              type: \"submit\",\n              className: \"btn btn-success\",\n              onClick: e => setModalState(false),\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"description\",\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"posts-container\",\n          children: userPosts.map(post => {\n            var _post$filename, _post$filename2, _post$filename3, _post$filename4;\n\n            let content = null;\n\n            if ((_post$filename = post.filename) === null || _post$filename === void 0 ? void 0 : _post$filename.includes(\"jpg\")) {\n              content = /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"image\",\n                src: \"http://localhost:5000/posts/images/\" + post.filename,\n                alt: \"is it here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 44\n              }, this);\n            } else if ((_post$filename2 = post.filename) === null || _post$filename2 === void 0 ? void 0 : _post$filename2.includes(\"jpeg\")) {\n              content = /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"image\",\n                src: \"http://localhost:5000/posts/images/\" + post.filename,\n                alt: \"is it here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 44\n              }, this);\n            } else if ((_post$filename3 = post.filename) === null || _post$filename3 === void 0 ? void 0 : _post$filename3.includes(\"png\")) {\n              content = /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"image\",\n                src: \"http://localhost:5000/posts/images/\" + post.filename,\n                alt: \"is it here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 44\n              }, this);\n            } else if ((_post$filename4 = post.filename) === null || _post$filename4 === void 0 ? void 0 : _post$filename4.includes(\"mov\")) {\n              content = /*#__PURE__*/_jsxDEV(\"video\", {\n                className: \"image\",\n                src: \"http://localhost:5000/posts/images/\" + post.filename,\n                controls: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 45\n              }, this);\n            }\n\n            ;\n            return content;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProfileComponent, \"7ddcMyQcejKntNHT+35sQLzBSj0=\", false, function () {\n  return [useParams];\n});\n\n_c = ProfileComponent;\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.posts.posts,\n    auth: state.auth.user\n  };\n};\n\nexport default connect(mapStateToProps)(ProfileComponent); //problem is that the props loaded rn are the entire posts, although i want to filter only the users posts.\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileComponent\");","map":{"version":3,"sources":["/Users/Tao.S/Desktop/WebDev/MA/Front-end/src/Components/User/ProfileComponent.tsx"],"names":["React","useState","Modal","connect","useParams","ProfileWrapper","ProfileComponent","props","username","modalIsOpen","setModalState","userName","setUsername","description","setDescription","userPosts","posts","filter","post","e","target","value","map","content","filename","includes","mapStateToProps","state","auth","user"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport Modal from \"react-modal\";\nimport {connect} from \"react-redux\";\nimport {useParams} from \"react-router\";\n// import postsReducer from \"../../store/reducers/postsReducer\";\nimport {ProfileWrapper} from \"./ProfileCompoent_style\";\n\ninterface Props {\n    username?: any;\n    description?: string;\n    posts?: any;\n}\n\n\nexport const ProfileComponent: React.FC<Props> = (props: any) => {\n\n    let {username} = useParams<any>();\n   \n    const [modalIsOpen, setModalState] = useState(false);\n    const [userName, setUsername] = useState(username);\n    const [description, setDescription] = useState(\"\");\n\n    const userPosts = props.posts.filter((post: any) => post.username ===  username)\n\n   \n\n    return(\n    \n    <ProfileWrapper>\n        <div className=\"container\">\n            <div className=\"card\">\n                <h2 className=\"username\">{userName}</h2>\n                <button className=\"descButton\" onClick={(e) => setModalState(true)}>Edit Profile</button>\n                <Modal　isOpen={modalIsOpen} onRequestClose={() => setModalState(false)}>\n                <form className=\"form\" action=\"/upload\">\n                <label>Name:</label>\n                    <input\n                    type=\"text\"\n                    name=\"username\"\n                    id=\"input\"\n                    value={userName}\n                    onChange={(e)=> setUsername(e.target.value)}\n                    required\n                    /><br /><br />\n                \n                <label>Description:</label>\n                    <input\n                    type=\"text\"\n                    name=\"description\"\n                    id=\"input\"\n                    value={description}\n                    onChange={(e)=> setDescription(e.target.value)}\n                    required\n                    /><br /><br />\n                    \n                  \n                    <button id=\"submit\" type=\"submit\" className=\"btn btn-success\" onClick={(e) => setModalState(false)}>Submit</button>\n                    \n            </form>\n                   \n                </Modal>\n\n                <div className=\"description\">\n                   {description}\n                </div>\n\n                <div className=\"posts-container\">\n                    {userPosts.map((post: any) => {\n\n                        let content = null; \n\n                        if (post.filename?.includes(\"jpg\")){\n                                content = (<img className=\"image\" src={\"http://localhost:5000/posts/images/\" + post.filename} alt=\"is it here\"></img>);\n                            }\n                         else if (post.filename?.includes(\"jpeg\")){\n                                content = (<img className=\"image\" src={\"http://localhost:5000/posts/images/\" + post.filename} alt=\"is it here\"></img>);\n                            }\n                        else if (post.filename?.includes(\"png\")){\n                                content = (<img className=\"image\" src={\"http://localhost:5000/posts/images/\" + post.filename} alt=\"is it here\"></img>);\n                            }\n                        else if (post.filename?.includes(\"mov\")){\n                                 content = (<video className=\"image\" src={\"http://localhost:5000/posts/images/\" + post.filename} controls></video>);\n                            };    \n    \n                        return content;       \n                    })}\n                </div>\n            </div>\n        </div>\n    </ProfileWrapper>\n\n    );\n};\n\nconst mapStateToProps = (state: any) => {\n    return{\n    posts: state.posts.posts,\n    auth: state.auth.user,\n    }\n}\n\nexport default connect(mapStateToProps)(ProfileComponent);\n\n//problem is that the props loaded rn are the entire posts, although i want to filter only the users posts."]},"metadata":{},"sourceType":"module"}