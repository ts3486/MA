{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Tao.S/Desktop/WebDev/MA/Front-end/src/Components/Posts/PostComponent.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport './PostComponent_style.tsx';\nimport { PostWrapper } from \"./PostComponent_style\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\"; // import { makeStyles } from '@material-ui/core/styles';\n// import clsx from 'clsx';\n\nimport { Card, CardHeader, CardMedia, CardContent, CardActions, IconButton, Avatar } from \"@material-ui/core\";\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nexport const PostComponent = Props => {\n  _s();\n\n  //Get images\n  // let content = null;\n  // if (Props.filename?.includes(\"jpg\")){\n  //     content = (<img className=\"image\" src={\"http://localhost:5000/posts/images/\" + Props.filename} alt=\"is it here\"></img>);\n  // }\n  // else if (Props.filename?.includes(\"jpeg\")){\n  //     content = (<img className=\"image\" src={\"http://localhost:5000/posts/images/\" + Props.filename} alt=\"is it here\"></img>);\n  // }\n  // else if (Props.filename?.includes(\"png\")){\n  //     content = (<img className=\"image\" src={\"http://localhost:5000/posts/images/\" + Props.filename} alt=\"is it here\"></img>);\n  // }\n  // else if (Props.filename?.includes(\"mov\")){\n  //     content = (<video className=\"image\" src={\"http://localhost:5000/posts/images/\" + Props.filename} controls></video>);\n  // };\n  //Delete posts\n  // const deleteHandler = () => {\n  //     axios.delete(\"http://localhost:5000/posts/delete/\" + Props.id).then(()=>{\n  //         console.log(\"image \" + Props.id + \" deleted\");\n  //     })\n  //     axios.delete(\"http://localhost:5000/posts/image/delete/\" + Props.filename);\n  //     window.location.reload();\n  // };\n  //Add Likes\n  const [likes, addLike] = useState(0);\n  const [postLiked, markPost] = useState(false);\n  useEffect(() => {\n    let initialLikes = likes; //load the likes of the post\n\n    if (initialLikes === 0) {\n      axios.get(\"http://localhost:5000/posts/\" + Props.id).then(res => {\n        let currentLikes = res.data.likes;\n        addLike(likes + currentLikes);\n      });\n    } //check if user has liked this post before\n\n\n    axios.get(\"http://localhost:5000/post/\" + Props.id).then(res => {});\n  });\n\n  const likeHandler = updatedLikes => {\n    const Likes = {\n      id: Props.id,\n      likes: updatedLikes\n    };\n    JSON.stringify(Likes);\n    axios.post(\"http://localhost:5000/posts/like\", Likes).then(() => {\n      console.log(\"like added\");\n    });\n    markPost(true);\n  };\n\n  const unlikeHandler = updatedLikes => {\n    const Likes = {\n      id: Props.id,\n      likes: updatedLikes\n    };\n    JSON.stringify(Likes);\n    axios.post(\"http://localhost:5000/posts/like\", Likes).then(() => {\n      console.log(\"like added\");\n    });\n    markPost(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(PostWrapper, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"post_container\",\n      id: Props.id,\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        className: \"username\",\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          \"aria-label\": \"recipe\",\n          className: \"avatar\",\n          children: \" R \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 29\n        }, this),\n        action: /*#__PURE__*/_jsxDEV(IconButton, {\n          \"aria-label\": \"settings\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(MoreVertIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 64\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 29\n        }, this),\n        title: Props.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n        square: true,\n        src: \"http://localhost:5000/posts/images/\" + Props.filename,\n        title: \"post content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: Props.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n        children: postLiked ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"actionIcons\",\n          children: [/*#__PURE__*/_jsxDEV(FavoriteIcon, {\n            className: \"likes\",\n            onClick: () => {\n              addLike(likes - 1);\n              unlikeHandler(likes - 1);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 21\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"likeNumber\",\n            children: [\": \", likes]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 119\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(FavoriteBorderIcon, {\n            className: \"likes\",\n            onClick: () => {\n              addLike(likes + 1);\n              likeHandler(likes + 1);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 21\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"likeNumber\",\n            children: [\": \", likes]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 123\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostComponent, \"jDsGzHiRe8sDoz/XJx7sWKOKW4o=\");\n\n_c = PostComponent;\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.posts.posts\n  };\n};\n\nexport default connect(mapStateToProps)(PostComponent);\n\nvar _c;\n\n$RefreshReg$(_c, \"PostComponent\");","map":{"version":3,"sources":["/Users/Tao.S/Desktop/WebDev/MA/Front-end/src/Components/Posts/PostComponent.tsx"],"names":["React","useState","useEffect","PostWrapper","axios","connect","Card","CardHeader","CardMedia","CardContent","CardActions","IconButton","Avatar","MoreVertIcon","FavoriteBorderIcon","FavoriteIcon","PostComponent","Props","likes","addLike","postLiked","markPost","initialLikes","get","id","then","res","currentLikes","data","likeHandler","updatedLikes","Likes","JSON","stringify","post","console","log","unlikeHandler","username","filename","description","mapStateToProps","state","posts"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,2BAAP;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CACA;AACA;;AACA,SAAQC,IAAR,EAAcC,UAAd,EAA0BC,SAA1B,EAAqCC,WAArC,EAAkDC,WAAlD,EAA+DC,UAA/D,EAA2EC,MAA3E,QAAwF,mBAAxF;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AAaA,OAAO,MAAMC,aAA8B,GAAIC,KAAD,IAAW;AAAA;;AAEzD;AACI;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEJ;AACI;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEJ;AAEI,QAAM,CAACC,KAAD,EAAQC,OAAR,IAAmBlB,QAAQ,CAAC,CAAD,CAAjC;AACA,QAAM,CAACmB,SAAD,EAAYC,QAAZ,IAAwBpB,QAAQ,CAAC,KAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAIoB,YAAY,GAAGJ,KAAnB,CAFY,CAGZ;;AACA,QAAGI,YAAY,KAAK,CAApB,EAAsB;AAClBlB,MAAAA,KAAK,CAACmB,GAAN,CAAU,iCAAiCN,KAAK,CAACO,EAAjD,EAAqDC,IAArD,CAA2DC,GAAD,IAAc;AACpE,YAAIC,YAAY,GAAGD,GAAG,CAACE,IAAJ,CAASV,KAA5B;AACAC,QAAAA,OAAO,CAACD,KAAK,GAAGS,YAAT,CAAP;AACH,OAHD;AAIH,KATW,CAUZ;;;AACAvB,IAAAA,KAAK,CAACmB,GAAN,CAAU,gCAAgCN,KAAK,CAACO,EAAhD,EAAoDC,IAApD,CAA0DC,GAAD,IAAc,CACtE,CADD;AAEH,GAbQ,CAAT;;AAuBA,QAAMG,WAAW,GAAIC,YAAD,IAA0B;AAE1C,UAAMC,KAAe,GAAG;AACpBP,MAAAA,EAAE,EAAEP,KAAK,CAACO,EADU;AAEpBN,MAAAA,KAAK,EAAEY;AAFa,KAAxB;AAKAE,IAAAA,IAAI,CAACC,SAAL,CAAeF,KAAf;AAEA3B,IAAAA,KAAK,CAAC8B,IAAN,CAAW,kCAAX,EAA+CH,KAA/C,EACCN,IADD,CACM,MAAI;AAACU,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAA0B,KADrC;AAGAf,IAAAA,QAAQ,CAAC,IAAD,CAAR;AAEH,GAdD;;AAgBA,QAAMgB,aAAa,GAAIP,YAAD,IAA0B;AAE5C,UAAMC,KAAe,GAAG;AACpBP,MAAAA,EAAE,EAAEP,KAAK,CAACO,EADU;AAEpBN,MAAAA,KAAK,EAAEY;AAFa,KAAxB;AAKAE,IAAAA,IAAI,CAACC,SAAL,CAAeF,KAAf;AAEA3B,IAAAA,KAAK,CAAC8B,IAAN,CAAW,kCAAX,EAA+CH,KAA/C,EACCN,IADD,CACM,MAAI;AAACU,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAA0B,KADrC;AAGAf,IAAAA,QAAQ,CAAC,KAAD,CAAR;AAEH,GAdD;;AAkBA,sBACI,QAAC,WAAD;AAAA,2BAEI,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,gBAAhB;AAAiC,MAAA,EAAE,EAAEJ,KAAK,CAACO,EAA3C;AAAA,8BAEI,QAAC,UAAD;AAAY,QAAA,SAAS,EAAC,UAAtB;AACI,QAAA,MAAM,eAAE,QAAC,MAAD;AAAQ,wBAAW,QAAnB;AAA4B,UAAA,SAAS,EAAC,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADZ;AAEI,QAAA,MAAM,eAAE,QAAC,UAAD;AAAY,wBAAW,UAAvB;AAAA,uCAAmC,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,kBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFZ;AAGI,QAAA,KAAK,EAAEP,KAAK,CAACqB;AAHjB;AAAA;AAAA;AAAA;AAAA,cAFJ,eAOI,QAAC,SAAD;AAAW,QAAA,MAAM,MAAjB;AAAkB,QAAA,GAAG,EAAE,wCAAwCrB,KAAK,CAACsB,QAArE;AAA+E,QAAA,KAAK,EAAC;AAArF;AAAA;AAAA;AAAA;AAAA,cAPJ,eAYI,QAAC,WAAD;AAAA,kBAActB,KAAK,CAACuB;AAApB;AAAA;AAAA;AAAA;AAAA,cAZJ,eAcI,QAAC,WAAD;AAAA,kBACKpB,SAAS,gBACV;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,kCACA,QAAC,YAAD;AAAc,YAAA,SAAS,EAAC,OAAxB;AAAgC,YAAA,OAAO,EAAE,MAAM;AAACD,cAAAA,OAAO,CAACD,KAAK,GAAG,CAAT,CAAP;AAAoBmB,cAAAA,aAAa,CAACnB,KAAK,GAAG,CAAT,CAAb;AAA0B;AAA9F;AAAA;AAAA;AAAA;AAAA,kBADA,oBACkG;AAAK,YAAA,SAAS,EAAC,YAAf;AAAA,6BAA+BA,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,kBADlG;AAAA;AAAA;AAAA;AAAA;AAAA,gBADU,gBAKV;AAAA,kCACA,QAAC,kBAAD;AAAoB,YAAA,SAAS,EAAC,OAA9B;AAAsC,YAAA,OAAO,EAAE,MAAM;AAACC,cAAAA,OAAO,CAACD,KAAK,GAAG,CAAT,CAAP;AAAoBW,cAAAA,WAAW,CAACX,KAAK,GAAG,CAAT,CAAX;AAAwB;AAAlG;AAAA;AAAA;AAAA;AAAA,kBADA,oBACsG;AAAK,YAAA,SAAS,EAAC,YAAf;AAAA,6BAA+BA,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,kBADtG;AAAA;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,cAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAmCH,CA9HM;;GAAMF,a;;KAAAA,a;;AAgIb,MAAMyB,eAAe,GAAIC,KAAD,IAAgB;AACpC,SAAM;AACFC,IAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,CAAYA;AADjB,GAAN;AAGH,CAJD;;AAMA,eAAetC,OAAO,CAACoC,eAAD,CAAP,CAAyBzB,aAAzB,CAAf","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport './PostComponent_style.tsx';\nimport { PostWrapper } from \"./PostComponent_style\";\nimport axios from \"axios\";\nimport {connect} from \"react-redux\";\n// import { makeStyles } from '@material-ui/core/styles';\n// import clsx from 'clsx';\nimport {Card, CardHeader, CardMedia, CardContent, CardActions, IconButton, Avatar} from \"@material-ui/core\";\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\n\n\ninterface Props {\n    id?: string;\n    username?: string;\n    filename?: string;\n    description?: string;\n    likes?: number;\n    imageId?: string;\n}\n\n\nexport const PostComponent: React.FC<Props> = (Props) => {\n\n//Get images\n    // let content = null;\n\n    // if (Props.filename?.includes(\"jpg\")){\n    //     content = (<img className=\"image\" src={\"http://localhost:5000/posts/images/\" + Props.filename} alt=\"is it here\"></img>);\n    // }\n    // else if (Props.filename?.includes(\"jpeg\")){\n    //     content = (<img className=\"image\" src={\"http://localhost:5000/posts/images/\" + Props.filename} alt=\"is it here\"></img>);\n    // }\n    // else if (Props.filename?.includes(\"png\")){\n    //     content = (<img className=\"image\" src={\"http://localhost:5000/posts/images/\" + Props.filename} alt=\"is it here\"></img>);\n    // }\n    // else if (Props.filename?.includes(\"mov\")){\n    //     content = (<video className=\"image\" src={\"http://localhost:5000/posts/images/\" + Props.filename} controls></video>);\n    // };\n\n//Delete posts\n    // const deleteHandler = () => {\n    //     axios.delete(\"http://localhost:5000/posts/delete/\" + Props.id).then(()=>{\n    //         console.log(\"image \" + Props.id + \" deleted\");\n    //     })\n\n    //     axios.delete(\"http://localhost:5000/posts/image/delete/\" + Props.filename);\n\n    //     window.location.reload();\n    // };\n\n//Add Likes\n\n    const [likes, addLike] = useState(0);\n    const [postLiked, markPost] = useState(false);\n   \n    useEffect(() => {\n\n        let initialLikes = likes;\n        //load the likes of the post\n        if(initialLikes === 0){\n            axios.get(\"http://localhost:5000/posts/\" + Props.id).then((res: any) => {\n                let currentLikes = res.data.likes;\n                addLike(likes + currentLikes);\n            })\n        }\n        //check if user has liked this post before\n        axios.get(\"http://localhost:5000/post/\" + Props.id).then((res: any) => {\n        })\n    });\n\n\n\n\n    interface likeData{\n        id: String | undefined,\n        likes: Number\n    }\n\n    const likeHandler = (updatedLikes: number) => {\n\n        const Likes: likeData = {\n            id: Props.id,\n            likes: updatedLikes,\n        }\n\n        JSON.stringify(Likes);\n\n        axios.post(\"http://localhost:5000/posts/like\", Likes)\n        .then(()=>{console.log(\"like added\")})\n\n        markPost(true);\n\n    };\n\n    const unlikeHandler = (updatedLikes: number) => {\n\n        const Likes: likeData = {\n            id: Props.id,\n            likes: updatedLikes,\n        }\n\n        JSON.stringify(Likes);\n\n        axios.post(\"http://localhost:5000/posts/like\", Likes)\n        .then(()=>{console.log(\"like added\")})\n\n        markPost(false);\n\n    }\n\n\n\n    return( \n        <PostWrapper>\n             \n            <Card className=\"post_container\" id={Props.id} >\n\n                <CardHeader className=\"username\" \n                    avatar={<Avatar aria-label=\"recipe\" className=\"avatar\"> R </Avatar>} \n                    action={<IconButton aria-label=\"settings\"> <MoreVertIcon /> </IconButton>}\n                    title={Props.username}/>\n\n                <CardMedia square src={\"http://localhost:5000/posts/images/\" + Props.filename} title=\"post content\"/>\n    \n                {/* Image or Video */}\n                {/* {content} */}\n                \n                <CardContent>{Props.description}</CardContent>\n\n                <CardActions>\n                    {postLiked ? \n                    <div className=\"actionIcons\">\n                    <FavoriteIcon className=\"likes\" onClick={() => {addLike(likes - 1); unlikeHandler(likes - 1);}}/> <div className=\"likeNumber\">: {likes}</div>\n                    </div>\n                    :\n                    <div>\n                    <FavoriteBorderIcon className=\"likes\" onClick={() => {addLike(likes + 1); likeHandler(likes + 1);}}/> <div className=\"likeNumber\">: {likes}</div>\n                    </div>\n                    }               \n                    {/* You use the empty function to not pass the event to the function. instead it`s just a trigger to activate the function */}\n                    {/* <DeleteIcon className=\"button\" onClick={deleteHandler}/> */}\n                </CardActions>\n\n            </Card>\n        </PostWrapper>\n    )\n\n}\n\nconst mapStateToProps = (state: any) => {\n    return{\n        posts: state.posts.posts,\n    }\n}\n\nexport default connect(mapStateToProps)(PostComponent);\n\n"]},"metadata":{},"sourceType":"module"}