{"ast":null,"code":"import * as actionTypes from \"../actions/home_actions\";\nconst initialState = {\n  posts: [],\n  //check if data is loaded or not\n  data: false\n};\n\nconst homeReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.AWAIT_DATA:\n      return { ...state,\n        data: true\n      };\n\n    case actionTypes.DECREMENT:\n      return { ///update state immutably. Don`t mutate old state, just pull old state and update\n        ...state,\n        text: state.text.splice(0, 1)\n      };\n\n    case actionTypes.ON_MOUNT:\n      return { //use the ... spread operator to spread and copy the current state\n        ...state,\n        //to update an array, use concat to \n        posts: state.posts.concat(action.posts) // images: state.images.concat(action.images)\n\n      };\n  }\n\n  return state;\n};\n\nexport default homeReducer;","map":{"version":3,"sources":["/Users/Tao.S/Desktop/WebDev/MA/Front-end/src/store/reducers/home_reducer.tsx"],"names":["actionTypes","initialState","posts","data","homeReducer","state","action","type","AWAIT_DATA","DECREMENT","text","splice","ON_MOUNT","concat"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,yBAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjB;AACAC,EAAAA,IAAI,EAAE;AAHW,CAArB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAU,GAAGJ,YAAd,EAA4BK,MAA5B,KAA4C;AAG5D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKP,WAAW,CAACQ,UAAjB;AACI,aAAM,EACJ,GAAGH,KADC;AAEJF,QAAAA,IAAI,EAAE;AAFF,OAAN;;AAKJ,SAAKH,WAAW,CAACS,SAAjB;AACI,aAAM,EACF;AACA,WAAGJ,KAFD;AAGFK,QAAAA,IAAI,EAAEL,KAAK,CAACK,IAAN,CAAWC,MAAX,CAAkB,CAAlB,EAAoB,CAApB;AAHJ,OAAN;;AAMJ,SAAKX,WAAW,CAACY,QAAjB;AACI,aAAO,EACH;AACA,WAAGP,KAFA;AAGH;AACAH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYW,MAAZ,CAAmBP,MAAM,CAACJ,KAA1B,CAJJ,CAKH;;AALG,OAAP;AAfR;;AAyBA,SAAOG,KAAP;AACH,CA7BD;;AAgCA,eAAeD,WAAf","sourcesContent":["import * as actionTypes from \"../actions/home_actions\"\n\nconst initialState = {\n    posts: [],\n    //check if data is loaded or not\n    data: false,\n};\n\n\nconst homeReducer = (state: any = initialState, action: any) => {\n\n\n    switch(action.type){\n        case actionTypes.AWAIT_DATA:\n            return{\n              ...state,\n              data: true\n            };\n        \n        case actionTypes.DECREMENT:\n            return{\n                ///update state immutably. Don`t mutate old state, just pull old state and update\n                ...state,\n                text: state.text.splice(0,1)\n            };\n\n        case actionTypes.ON_MOUNT:\n            return {\n                //use the ... spread operator to spread and copy the current state\n                ...state,\n                //to update an array, use concat to \n                posts: state.posts.concat(action.posts),\n                // images: state.images.concat(action.images)\n            };\n            \n    } \n\n    return state;\n}\n\n\nexport default homeReducer\n"]},"metadata":{},"sourceType":"module"}