{"ast":null,"code":"import axios from\"axios\";import{returnErrors}from\"./error_actions\";export var REGISTER_SUCCESS=\"REGISTER_SUCCESS\";export var REGISTER_FAIL=\"REGISTER_FAIL\";export var USER_LOADING=\"USER_LOADING\";export var USER_LOADED=\"USER_LOADED\";export var AUTH_ERROR=\"AUTH_ERROR\";export var LOGIN_SUCCESS=\"LOGIN_SUCCESS\";export var LOGIN_FAIL=\"LOGIN_FAIL\";export var LOGOUT_SUCCESS=\"LOGOUT_SUCCESS\";export var GET_ERRORS=\"GET_ERRORS\";export var CLEAR_ERRORS=\"CLEAR_ERRORS\";//Register User\nexport var registerUser=function registerUser(_ref){var username=_ref.username,email=_ref.email,password=_ref.password;return function(dispatch){//Headers\nvar config={headers:{\"Content-type\":\"application/json\"}};//Request body\nvar body=JSON.stringify({username:username,email:email,password:password});axios.post(\"http://localhost:5000/users/add\",body,config).then(function(res){return dispatch({type:REGISTER_SUCCESS,//send user and token data\npayload:res.data});}).catch(function(err){dispatch(returnErrors(err.response.data,err.response.status,\"REGISTER_FAIL\"));dispatch({type:REGISTER_FAIL});});};};//Check token & load user on reload\n//call dispatch to make asynchronous requests\nexport var loadUser=function loadUser(){return function(dispatch,getState){//User loading\ndispatch({type:USER_LOADING});axios.get(\"http://localhost:5000/auth/user\",tokenConfig(getState)).then(function(res){dispatch({type:USER_LOADED,payload:res.data});}).catch(function(err){dispatch(returnErrors(err.response.data,err.response.status));dispatch({type:AUTH_ERROR});});};};//Login\nexport var login=function login(_ref2){var email=_ref2.email,password=_ref2.password;return function(dispatch){//Headers\nvar config={headers:{\"Content-type\":\"application/json\"}};//Request body\nvar body=JSON.stringify({email:email,password:password});axios.post(\"http://localhost:5000/auth\",body,config).then(function(res){return dispatch({type:LOGIN_SUCCESS,//send user and token data\npayload:res.data});}).catch(function(err){dispatch(returnErrors(err.response.data,err.response.status,\"LOGIN_FAIL\"));dispatch({type:LOGIN_FAIL});});};};//Logout \nexport var logout=function logout(){return{type:LOGOUT_SUCCESS};};//Setup config/headers and token (authentication process)\nexport var tokenConfig=function tokenConfig(getState){//Get token from localStorage\nvar token=getState().auth.token;//Set Headers\nvar config={headers:{\"Content-type\":\"application/json\"}};//If token exists, add to headers\nif(token){config.headers[\"x-auth-token\"]=token;}//return the config\nreturn config;};//Django Auth\n// import axios from \"axios\";\n// export const AUTH_START = \"AUTH_START\";\n// export const AUTH_SUCCESS = \"AUTH_SUCESS\";\n// export const AUTH_FAIL = \"AUTH_FAIL\";\n// export const AUTH_LOGOUT = \"AUTH_LOGOUT\";\n// export const authStart = () => {\n//     return {\n//         type: AUTH_START,\n//     }\n// }\n// export const authSuccess = (token: any) => {\n//     return {\n//         type: AUTH_SUCCESS,\n//         token: token,\n//     }\n// }\n// export const authFail = (error: any) => {\n//     return {\n//         type: AUTH_FAIL,\n//         error: error,\n//     }\n// }\n// //logout function. Removes and resets items in local storage\n// export const logout = () => {\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"expirationDate\")\n// }\n// //To trigger logout after a certain period of time of inactivity\n// export const checkAuthTimeout = (expirationTime: number) => {\n//     return (dispatch: any) => {\n//         setTimeout(()=> {\n//             dispatch(logout());\n//         }, expirationTime * 1000)\n//     }\n// }\n// //Signup for first-timers\n// export const authSignup = (email: string, username: string, password1: string | number, password2: string | number) => {\n//     return (dispatch: any) => {\n//         dispatch(authStart());\n//         //post new user to server\n//         axios.post(\"http://127.0.0.1:8000/rest-auth/registration\", {\n//             email: email,\n//             username: username,\n//             password1: password1,\n//             password2: password2,\n//         })\n//         .then(res => {\n//             //create a token for the new user\n//             const token = res.data.key;\n//             //create a timestamp for when tehy logged in\n//             const newDate = new Date();\n//             const expirationDate: any = new Date(newDate.getTime() + 3600*1000);\n//             //store in local storage so refresh doesnt rest login status\n//             localStorage.setItem(\"token\", token);\n//             localStorage.setItem(\"expirationDate\", expirationDate);\n//             dispatch(authSuccess(token));\n//             dispatch(checkAuthTimeout(3600));\n//         })\n//         .catch(error => {\n//             //handle errors with the authFail function\n//             dispatch(authFail(error))\n//         })\n//     }\n// }\n// export const authLogin = (username: string, password: string | number) => {\n//     // \"() => async\" having this infront of (dispatch: any) caused the function to not startã€€\n//     return (dispatch: any) => {\n//         //authStart makes \"loading\" true\n//         console.log(\"Authentication started\")\n//         dispatch(authStart());\n//         axios.post(\"http://127.0.0.1:8000/rest-auth/login/\", {\n//             username: username,\n//             password: password\n//         })\n//         .then(res => {\n//             const token = res.data.key;\n//             const newDate = new Date();\n//             const expirationDate: any = new Date(newDate.getTime() + 3600*1000);\n//             localStorage.setItem(\"token\", token);\n//             localStorage.setItem(\"expirationDate\", expirationDate);\n//             console.log(token);\n//             dispatch(authSuccess(token));\n//             dispatch(checkAuthTimeout(3600));\n//         })\n//         .catch(error => {\n//             dispatch(authFail(error))\n//         })\n//     }\n// }\n// export const authLogout = () => {\n//     return {\n//         type: AUTH_LOGOUT,\n//     }\n// }\n// export const authCheckState = () => {\n//     return () => async(dispatch: any) => {\n//         const token = localStorage.getItem(\"token\");\n//         if (token === undefined){\n//             dispatch(logout());\n//         }\n//         else {\n//             const storageDate: any = localStorage.getItem(\"expirationDate\")\n//             const expirationDate: any = new Date(storageDate);\n//             if (expirationDate <= new Date()){\n//                 dispatch(logout());\n//             }\n//             else{\n//                 dispatch(authSuccess(token));\n//                 dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime())/1000));\n//             }\n//         }\n//     }\n// }","map":{"version":3,"sources":["/Users/Tao.S/Desktop/WebDev/MA/frontend/src/store/actions/auth_actions.tsx"],"names":["axios","returnErrors","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","GET_ERRORS","CLEAR_ERRORS","registerUser","username","email","password","dispatch","config","headers","body","JSON","stringify","post","then","res","type","payload","data","catch","err","response","status","loadUser","getState","get","tokenConfig","login","logout","token","auth"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,YAAR,KAA2B,iBAA3B,CAEA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,kBAAzB,CACP,MAAO,IAAMC,CAAAA,aAAa,CAAG,eAAtB,CACP,MAAO,IAAMC,CAAAA,YAAY,CAAG,cAArB,CACP,MAAO,IAAMC,CAAAA,WAAW,CAAG,aAApB,CACP,MAAO,IAAMC,CAAAA,UAAU,CAAG,YAAnB,CACP,MAAO,IAAMC,CAAAA,aAAa,CAAG,eAAtB,CACP,MAAO,IAAMC,CAAAA,UAAU,CAAG,YAAnB,CACP,MAAO,IAAMC,CAAAA,cAAc,CAAG,gBAAvB,CACP,MAAO,IAAMC,CAAAA,UAAU,CAAG,YAAnB,CACP,MAAO,IAAMC,CAAAA,YAAY,CAAG,cAArB,CAQP;AACA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,UAAEC,CAAAA,QAAF,MAAEA,QAAF,CAAWC,KAAX,MAAWA,KAAX,CAAiBC,QAAjB,MAAiBA,QAAjB,OAAiD,UAACC,QAAD,CAAmB,CAC5F;AACA,GAAMC,CAAAA,MAAM,CAAG,CACXC,OAAO,CAAE,CACL,eAAgB,kBADX,CADE,CAAf,CAKA;AACA,GAAMC,CAAAA,IAAI,CAAGC,IAAI,CAACC,SAAL,CAAe,CAACR,QAAQ,CAARA,QAAD,CAAUC,KAAK,CAALA,KAAV,CAAgBC,QAAQ,CAARA,QAAhB,CAAf,CAAb,CAEAf,KAAK,CAACsB,IAAN,CAAW,iCAAX,CAA8CH,IAA9C,CAAoDF,MAApD,EACKM,IADL,CACU,SAACC,GAAD,QAAcR,CAAAA,QAAQ,CAAC,CACzBS,IAAI,CAAEvB,gBADmB,CAEzB;AACAwB,OAAO,CAAEF,GAAG,CAACG,IAHY,CAAD,CAAtB,EADV,EAMKC,KANL,CAMW,SAACC,GAAD,CAAc,CACjBb,QAAQ,CAACf,YAAY,CAAC4B,GAAG,CAACC,QAAJ,CAAaH,IAAd,CAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAyC,eAAzC,CAAb,CAAR,CACAf,QAAQ,CAAC,CACLS,IAAI,CAAEtB,aADD,CAAD,CAAR,CAGH,CAXL,EAYH,CAtB2B,EAArB,CA0BP;AACA;AACA,MAAO,IAAM6B,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,SAAM,UAAChB,QAAD,CAAgBiB,QAAhB,CAAkC,CAC5D;AACAjB,QAAQ,CAAC,CAACS,IAAI,CAAErB,YAAP,CAAD,CAAR,CAEAJ,KAAK,CAACkC,GAAN,CAAU,iCAAV,CAA6CC,WAAW,CAACF,QAAD,CAAxD,EAAoEV,IAApE,CAAyE,SAACC,GAAD,CAAc,CACnFR,QAAQ,CAAC,CACLS,IAAI,CAAEpB,WADD,CAELqB,OAAO,CAAEF,GAAG,CAACG,IAFR,CAAD,CAAR,CAGG,CAJP,EAKKC,KALL,CAKW,SAACC,GAAD,CAAa,CAChBb,QAAQ,CAACf,YAAY,CAAC4B,GAAG,CAACC,QAAJ,CAAaH,IAAd,CAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR,CACAf,QAAQ,CAAC,CACLS,IAAI,CAAEnB,UADD,CAAD,CAAR,CAGH,CAVL,EAWH,CAfuB,EAAjB,CAiBP;AACA,MAAO,IAAM8B,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,WAAEtB,CAAAA,KAAF,OAAEA,KAAF,CAAQC,QAAR,OAAQA,QAAR,OAAwC,UAACC,QAAD,CAAmB,CAC5E;AACA,GAAMC,CAAAA,MAAM,CAAG,CACXC,OAAO,CAAE,CACL,eAAgB,kBADX,CADE,CAAf,CAKA;AACA,GAAMC,CAAAA,IAAI,CAAGC,IAAI,CAACC,SAAL,CAAe,CAACP,KAAK,CAALA,KAAD,CAAOC,QAAQ,CAARA,QAAP,CAAf,CAAb,CAEAf,KAAK,CAACsB,IAAN,CAAW,4BAAX,CAAyCH,IAAzC,CAA+CF,MAA/C,EACKM,IADL,CACU,SAACC,GAAD,QAAcR,CAAAA,QAAQ,CAAC,CACzBS,IAAI,CAAElB,aADmB,CAEzB;AACAmB,OAAO,CAAEF,GAAG,CAACG,IAHY,CAAD,CAAtB,EADV,EAMKC,KANL,CAMW,SAACC,GAAD,CAAc,CACjBb,QAAQ,CAACf,YAAY,CAAC4B,GAAG,CAACC,QAAJ,CAAaH,IAAd,CAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAyC,YAAzC,CAAb,CAAR,CACAf,QAAQ,CAAC,CACLS,IAAI,CAAEjB,UADD,CAAD,CAAR,CAGH,CAXL,EAYH,CAtBoB,EAAd,CAyBP;AAEA,MAAO,IAAM6B,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CACxB,MAAM,CACFZ,IAAI,CAAEhB,cADJ,CAAN,CAGH,CAJM,CASP;AACA,MAAO,IAAM0B,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACF,QAAD,CAAoB,CAE3C;AACA,GAAMK,CAAAA,KAAK,CAAGL,QAAQ,GAAGM,IAAX,CAAgBD,KAA9B,CAEA;AACA,GAAMrB,CAAAA,MAAW,CAAG,CAChBC,OAAO,CAAE,CACL,eAAgB,kBADX,CADO,CAApB,CAMA;AACA,GAAGoB,KAAH,CAAU,CACNrB,MAAM,CAACC,OAAP,CAAe,cAAf,EAAiCoB,KAAjC,CACH,CAED;AACA,MAAOrB,CAAAA,MAAP,CACH,CAnBM,CAksourcesContent":["import axios from \"axios\";\nimport {returnErrors} from \"./error_actions\";\n\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\nexport const USER_LOADING = \"USER_LOADING\";\nexport const USER_LOADED = \"USER_LOADED\";\nexport const AUTH_ERROR = \"AUTH_ERROR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const GET_ERRORS = \"GET_ERRORS\";\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";\n\ninterface registrationData{\n    username?: String,\n    email: String,\n    password: String,\n}\n\n//Register User\nexport const registerUser = ({username,email,password}: registrationData) => (dispatch: any) => {\n    //Headers\n    const config = {\n        headers: {\n            \"Content-type\": \"application/json\"\n        }\n    };\n    //Request body\n    const body = JSON.stringify({username,email,password});\n\n    axios.post(\"http://localhost:5000/users/add\", body, config)\n        .then((res: any) => dispatch({\n            type: REGISTER_SUCCESS,\n            //send user and token data\n            payload: res.data,\n        }))\n        .catch((err: any) => {\n            dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n            dispatch({\n                type: REGISTER_FAIL,\n            })\n        }) \n}\n\n\n\n//Check token & load user on reload\n//call dispatch to make asynchronous requests\nexport const loadUser = () => (dispatch: any, getState: any) => {\n    //User loading\n    dispatch({type: USER_LOADING});\n\n    axios.get(\"http://localhost:5000/auth/user\", tokenConfig(getState)).then((res: any) => {\n        dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        })})\n        .catch((err:any) => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            })\n        })\n}\n\n//Login\nexport const login = ({email,password}: registrationData) => (dispatch: any) => {\n    //Headers\n    const config = {\n        headers: {\n            \"Content-type\": \"application/json\"\n        }\n    };\n    //Request body\n    const body = JSON.stringify({email,password});\n\n    axios.post(\"http://localhost:5000/auth\", body, config)\n        .then((res: any) => dispatch({\n            type: LOGIN_SUCCESS,\n            //send user and token data\n            payload: res.data,\n        }))\n        .catch((err: any) => {\n            dispatch(returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\"));\n            dispatch({\n                type: LOGIN_FAIL,\n            })\n        }) \n}\n\n\n//Logout \n\nexport const logout = () => {\n    return{\n        type: LOGOUT_SUCCESS\n    }\n} \n\n\n\n\n//Setup config/headers and token (authentication process)\nexport const tokenConfig = (getState: any)  => {\n    \n    //Get token from localStorage\n    const token = getState().auth.token;\n\n    //Set Headers\n    const config: any = {\n        headers: {\n            \"Content-type\": \"application/json\"\n        }\n    }\n\n    //If token exists, add to headers\n    if(token) {\n        config.headers[\"x-auth-token\"] = token;\n    }\n\n    //return the config\n    return config;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//Django Auth\n// import axios from \"axios\";\n\n// export const AUTH_START = \"AUTH_START\";\n// export const AUTH_SUCCESS = \"AUTH_SUCESS\";\n// export const AUTH_FAIL = \"AUTH_FAIL\";\n// export const AUTH_LOGOUT = \"AUTH_LOGOUT\";\n\n\n// export const authStart = () => {\n//     return {\n//         type: AUTH_START,\n//     }\n// }\n\n// export const authSuccess = (token: any) => {\n//     return {\n//         type: AUTH_SUCCESS,\n//         token: token,\n//     }\n// }\n\n// export const authFail = (error: any) => {\n//     return {\n//         type: AUTH_FAIL,\n//         error: error,\n//     }\n// }\n\n// //logout function. Removes and resets items in local storage\n// export const logout = () => {\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"expirationDate\")\n// }\n\n// //To trigger logout after a certain period of time of inactivity\n// export const checkAuthTimeout = (expirationTime: number) => {\n//     return (dispatch: any) => {\n//         setTimeout(()=> {\n//             dispatch(logout());\n//         }, expirationTime * 1000)\n//     }\n// }\n\n// //Signup for first-timers\n// export const authSignup = (email: string, username: string, password1: string | number, password2: string | number) => {\n//     return (dispatch: any) => {\n//         dispatch(authStart());\n//         //post new user to server\n//         axios.post(\"http://127.0.0.1:8000/rest-auth/registration\", {\n//             email: email,\n//             username: username,\n//             password1: password1,\n//             password2: password2,\n//         })\n//         .then(res => {\n//             //create a token for the new user\n//             const token = res.data.key;\n//             //create a timestamp for when tehy logged in\n//             const newDate = new Date();\n//             const expirationDate: any = new Date(newDate.getTime() + 3600*1000);\n//             //store in local storage so refresh doesnt rest login status\n//             localStorage.setItem(\"token\", token);\n//             localStorage.setItem(\"expirationDate\", expirationDate);\n//             dispatch(authSuccess(token));\n//             dispatch(checkAuthTimeout(3600));\n//         })\n//         .catch(error => {\n//             //handle errors with the authFail function\n//             dispatch(authFail(error))\n//         })\n//     }\n// }\n\n// export const authLogin = (username: string, password: string | number) => {\n//     // \"() => async\" having this infront of (dispatch: any) caused the function to not startã€€\n//     return (dispatch: any) => {\n//         //authStart makes \"loading\" true\n//         console.log(\"Authentication started\")\n//         dispatch(authStart());\n//         axios.post(\"http://127.0.0.1:8000/rest-auth/login/\", {\n//             username: username,\n//             password: password\n//         })\n//         .then(res => {\n//             const token = res.data.key;\n//             const newDate = new Date();\n//             const expirationDate: any = new Date(newDate.getTime() + 3600*1000);\n//             localStorage.setItem(\"token\", token);\n//             localStorage.setItem(\"expirationDate\", expirationDate);\n//             console.log(token);\n//             dispatch(authSuccess(token));\n//             dispatch(checkAuthTimeout(3600));\n//         })\n//         .catch(error => {\n//             dispatch(authFail(error))\n//         })\n//     }\n// }\n\n// export const authLogout = () => {\n//     return {\n//         type: AUTH_LOGOUT,\n//     }\n// }\n\n// export const authCheckState = () => {\n//     return () => async(dispatch: any) => {\n//         const token = localStorage.getItem(\"token\");\n//         if (token === undefined){\n//             dispatch(logout());\n//         }\n//         else {\n//             const storageDate: any = localStorage.getItem(\"expirationDate\")\n//             const expirationDate: any = new Date(storageDate);\n//             if (expirationDate <= new Date()){\n//                 dispatch(logout());\n//             }\n//             else{\n//                 dispatch(authSuccess(token));\n//                 dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime())/1000));\n//             }\n//         }\n//     }\n// }\n\n"]},"metadata":{},"sourceType":"module"}