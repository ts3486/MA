{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/Tao.S/Desktop/WebDev/MA/Front-end/src/App.tsx\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport * as actionTypes_posts from \"./store/actions/post_actions\";\nimport * as actionTypes_auth from \"./store/actions/auth_actions\";\nimport * as actionTypes_user from \"./store/actions/user_actions\";\nimport PostsPageComponent from \"./Components/Posts/PostsPageCompoenent\"; // import LoginComponent from \"./Components/Login/LoginComponent_test\";\n\nimport LoginComponent from \"./Components/Login/LoginComponent\";\nimport SignupComponent from \"./Components/Login/SignupComponent\";\nimport NavComponent from \"./Components/Navbar/NavComponent\";\nimport ProfileComponent from \"./Components/User/ProfileComponent\";\n\nclass App extends Component {\n  //constuructor is for creating a state at initialization.\n  //   constructor(props: any) {\n  //     super(props);\n  // }\n  //use \"async\" so that componentDidMount() is ran first. Async functions allow promise based processing (functions perfomed in order and after each task is done)          https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\n  async componentDidMount() {\n    await this.props.loadUser();\n    await this.props.fetchPosts();\n    await this.props.awaitData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    if ((await this.props.user) !== prevProps.user) {\n      this.props.countTotalLikes(this.props.user.username);\n    }\n\n    ;\n  }\n\n  render() {\n    // const posts = (\n    //   <div>\n    //       <div className=\"container\">\n    //         <h1>Music Accelerator</h1>\n    //       {this.props.posts.map((post: any, key: any) => {\n    //         return <PostComponent key={post._id} id= {post._id} username={post.username} filename={post.filename} description={post.description} likes={post.likes}/>   \n    //       })}      \n    //       </div>\n    //     {this.props.isAuthenticated ? \n    //     <FormComponent/> : null\n    //     }\n    //   </div>\n    // );\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          component: NavComponent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/\",\n            component: PostsPageComponent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/login\",\n            component: LoginComponent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/signup\",\n            component: SignupComponent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/profile/:username\",\n            component: ProfileComponent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this);\n  }\n\n} //directs how the state managed by redux will be mapped to state here. Makes data from store available to component\n\n\nconst mapStateToProps = state => {\n  return {\n    text: state.posts.text,\n    posts: state.posts.posts,\n    data: state.posts.data,\n    image: state.posts.images,\n    //checks if user token is null (looged in or not)   if state.auth.token is other than null, it returns true\n    isAuthenticated: state.auth.token !== null,\n    user: state.auth.user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchPosts: () => dispatch(actionTypes_posts.fetchPosts()),\n    awaitData: () => dispatch(actionTypes_posts.awaitData()),\n    loadUser: () => dispatch(actionTypes_auth.loadUser()),\n    countTotalLikes: username => dispatch(actionTypes_user.countTotalLikes(username))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App); //Current Tasks\n//1. implement the graduation system.\n//2. add postsLiked to user data.  \n//3. Design\n//Improvement Tasks\n//1. Goal: Make the object id of post and upload.file same. \n//2. Make the like button reflect fast consecutive clicks (post requests)\n//Design\n//1. Website Title Font\n//2. Post Cards, button placement&design\n//3. Profile Page","map":{"version":3,"sources":["/Users/Tao.S/Desktop/WebDev/MA/Front-end/src/App.tsx"],"names":["React","Component","BrowserRouter","Switch","Route","connect","actionTypes_posts","actionTypes_auth","actionTypes_user","PostsPageComponent","LoginComponent","SignupComponent","NavComponent","ProfileComponent","App","componentDidMount","props","loadUser","fetchPosts","awaitData","componentDidUpdate","prevProps","user","countTotalLikes","username","render","mapStateToProps","state","text","posts","data","image","images","isAuthenticated","auth","token","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\nimport './App.css';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport {connect} from \"react-redux\";\nimport * as actionTypes_posts from \"./store/actions/post_actions\";\nimport * as actionTypes_auth from \"./store/actions/auth_actions\";\nimport * as actionTypes_user from \"./store/actions/user_actions\";\nimport PostComponent from \"./Components/Posts/PostComponent\";\nimport FormComponent from \"./Components/Forms/FormComponent\";\nimport PostsPageComponent from \"./Components/Posts/PostsPageCompoenent\";\n// import LoginComponent from \"./Components/Login/LoginComponent_test\";\nimport LoginComponent from \"./Components/Login/LoginComponent\";\nimport SignupComponent from \"./Components/Login/SignupComponent\";\nimport NavComponent from \"./Components/Navbar/NavComponent\";\nimport ProfileComponent from \"./Components/User/ProfileComponent\";\n\n\nclass App extends Component<any> {\n\n//constuructor is for creating a state at initialization.\n//   constructor(props: any) {\n//     super(props);\n// }\n\n\n//use \"async\" so that componentDidMount() is ran first. Async functions allow promise based processing (functions perfomed in order and after each task is done)          https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\n  async componentDidMount(){\n\n    await this.props.loadUser();\n    await this.props.fetchPosts();\n    await this.props.awaitData();\n\n  };\n  \n  async componentDidUpdate(prevProps: any){\n\n    if(await this.props.user !== prevProps.user) {\n      this.props.countTotalLikes(this.props.user.username);\n    };\n  }\n\n  render(){\n\n    // const posts = (\n \n    //   <div>\n    //       <div className=\"container\">\n    //         <h1>Music Accelerator</h1>\n    //       {this.props.posts.map((post: any, key: any) => {\n    //         return <PostComponent key={post._id} id= {post._id} username={post.username} filename={post.filename} description={post.description} likes={post.likes}/>   \n    //       })}      \n    //       </div>\n\n    //     {this.props.isAuthenticated ? \n    //     <FormComponent/> : null\n    //     }\n    //   </div>\n    // );\n\n\n      return (\n\n        <div className=\"App\">\n          <BrowserRouter>\n              <Route component={NavComponent}/>\n          {/* Pages */}\n            <Switch>\n              {/* <Route exact={true} path=\"/\" render={()=> <div>{posts}</div>}/>          */}\n              <Route exact={true} path=\"/\" component={PostsPageComponent}/> \n              <Route exact={true} path=\"/login\" component={LoginComponent}/>\n              <Route exact={true} path=\"/signup\" component={SignupComponent}/>\n              <Route exact={true} path=\"/profile/:username\" component={ProfileComponent}/>\n            </Switch>\n          </BrowserRouter>\n        </div> \n      );\n  }\n}\n\n//directs how the state managed by redux will be mapped to state here. Makes data from store available to component\nconst mapStateToProps = (state: any) => {\n  return {\n      text: state.posts.text,\n      posts: state.posts.posts,\n      data: state.posts.data,\n      image: state.posts.images,\n      //checks if user token is null (looged in or not)   if state.auth.token is other than null, it returns true\n      isAuthenticated: state.auth.token !== null,\n      user: state.auth.user,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return{\n      fetchPosts: () => dispatch(actionTypes_posts.fetchPosts()),\n      awaitData: () => dispatch(actionTypes_posts.awaitData()),\n      loadUser: () => dispatch(actionTypes_auth.loadUser()),\n      countTotalLikes: (username: string) => dispatch(actionTypes_user.countTotalLikes(username)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n\n\n//Current Tasks\n//1. implement the graduation system.\n//2. add postsLiked to user data.  \n//3. Design\n\n\n//Improvement Tasks\n//1. Goal: Make the object id of post and upload.file same. \n//2. Make the like button reflect fast consecutive clicks (post requests)\n\n\n//Design\n//1. Website Title Font\n//2. Post Cards, button placement&design\n//3. Profile Page"]},"metadata":{},"sourceType":"module"}