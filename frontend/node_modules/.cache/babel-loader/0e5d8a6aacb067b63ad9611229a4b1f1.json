{"ast":null,"code":"import axios from \"axios\";\nimport { returnErrors } from \"./error_actions\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\nexport const USER_LOADING = \"USER_LOADING\";\nexport const USER_LOADED = \"USER_LOADED\";\nexport const AUTH_ERROR = \"AUTH_ERROR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const GET_ERRORS = \"GET_ERRORS\";\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";\n//Register User\nexport const registerUser = ({\n  username,\n  email,\n  password\n}) => dispatch => {\n  //Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; //Request body\n\n  const body = JSON.stringify({\n    username,\n    email,\n    password\n  });\n  axios.post(\"http://localhost:5000/users/add\", body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    //send user and token data\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; //Check token & load user on reload\n//call dispatch to make asynchronous requests\n\nexport const loadUser = () => (dispatch, getState) => {\n  //User loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get(\"/auth/user\", tokenConfig(getState)).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    }).catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n  });\n}; //Login\n\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  //Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; //Request body\n\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post(\"http://localhost:5000/auth/\", body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    //send user and token data\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\"));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; //Logout \n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; //Setup config/headers and token (authentication process)\n\nexport const tokenConfig = getState => {\n  //Get token from localStorage\n  const token = getState().auth.token; //Set Headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; //If token exists, add to headers\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  } //return the config\n\n\n  return config;\n}; //Django Auth\n// import axios from \"axios\";\n// export const AUTH_START = \"AUTH_START\";\n// export const AUTH_SUCCESS = \"AUTH_SUCESS\";\n// export const AUTH_FAIL = \"AUTH_FAIL\";\n// export const AUTH_LOGOUT = \"AUTH_LOGOUT\";\n// export const authStart = () => {\n//     return {\n//         type: AUTH_START,\n//     }\n// }\n// export const authSuccess = (token: any) => {\n//     return {\n//         type: AUTH_SUCCESS,\n//         token: token,\n//     }\n// }\n// export const authFail = (error: any) => {\n//     return {\n//         type: AUTH_FAIL,\n//         error: error,\n//     }\n// }\n// //logout function. Removes and resets items in local storage\n// export const logout = () => {\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"expirationDate\")\n// }\n// //To trigger logout after a certain period of time of inactivity\n// export const checkAuthTimeout = (expirationTime: number) => {\n//     return (dispatch: any) => {\n//         setTimeout(()=> {\n//             dispatch(logout());\n//         }, expirationTime * 1000)\n//     }\n// }\n// //Signup for first-timers\n// export const authSignup = (email: string, username: string, password1: string | number, password2: string | number) => {\n//     return (dispatch: any) => {\n//         dispatch(authStart());\n//         //post new user to server\n//         axios.post(\"http://127.0.0.1:8000/rest-auth/registration\", {\n//             email: email,\n//             username: username,\n//             password1: password1,\n//             password2: password2,\n//         })\n//         .then(res => {\n//             //create a token for the new user\n//             const token = res.data.key;\n//             //create a timestamp for when tehy logged in\n//             const newDate = new Date();\n//             const expirationDate: any = new Date(newDate.getTime() + 3600*1000);\n//             //store in local storage so refresh doesnt rest login status\n//             localStorage.setItem(\"token\", token);\n//             localStorage.setItem(\"expirationDate\", expirationDate);\n//             dispatch(authSuccess(token));\n//             dispatch(checkAuthTimeout(3600));\n//         })\n//         .catch(error => {\n//             //handle errors with the authFail function\n//             dispatch(authFail(error))\n//         })\n//     }\n// }\n// export const authLogin = (username: string, password: string | number) => {\n//     // \"() => async\" having this infront of (dispatch: any) caused the function to not startã€€\n//     return (dispatch: any) => {\n//         //authStart makes \"loading\" true\n//         console.log(\"Authentication started\")\n//         dispatch(authStart());\n//         axios.post(\"http://127.0.0.1:8000/rest-auth/login/\", {\n//             username: username,\n//             password: password\n//         })\n//         .then(res => {\n//             const token = res.data.key;\n//             const newDate = new Date();\n//             const expirationDate: any = new Date(newDate.getTime() + 3600*1000);\n//             localStorage.setItem(\"token\", token);\n//             localStorage.setItem(\"expirationDate\", expirationDate);\n//             console.log(token);\n//             dispatch(authSuccess(token));\n//             dispatch(checkAuthTimeout(3600));\n//         })\n//         .catch(error => {\n//             dispatch(authFail(error))\n//         })\n//     }\n// }\n// export const authLogout = () => {\n//     return {\n//         type: AUTH_LOGOUT,\n//     }\n// }\n// export const authCheckState = () => {\n//     return () => async(dispatch: any) => {\n//         const token = localStorage.getItem(\"token\");\n//         if (token === undefined){\n//             dispatch(logout());\n//         }\n//         else {\n//             const storageDate: any = localStorage.getItem(\"expirationDate\")\n//             const expirationDate: any = new Date(storageDate);\n//             if (expirationDate <= new Date()){\n//                 dispatch(logout());\n//             }\n//             else{\n//                 dispatch(authSuccess(token));\n//                 dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime())/1000));\n//             }\n//         }\n//     }\n// }","map":{"version":3,"sources":["/Users/Tao.S/Desktop/WebDev/MA/Front-end/src/store/actions/auth_actions.tsx"],"names":["axios","returnErrors","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","GET_ERRORS","CLEAR_ERRORS","registerUser","username","email","password","dispatch","config","headers","body","JSON","stringify","post","then","res","type","payload","data","catch","err","response","status","loadUser","getState","get","tokenConfig","login","logout","token","auth"],"mappings":"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":["import axios from \"axios\";\nimport {returnErrors} from \"./error_actions\";\n\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\nexport const USER_LOADING = \"USER_LOADING\";\nexport const USER_LOADED = \"USER_LOADED\";\nexport const AUTH_ERROR = \"AUTH_ERROR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const GET_ERRORS = \"GET_ERRORS\";\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";\n\ninterface registrationData{\n    username?: String,\n    email: String,\n    password: String,\n}\n\n//Register User\nexport const registerUser = ({username,email,password}: registrationData) => (dispatch: any) => {\n    //Headers\n    const config = {\n        headers: {\n            \"Content-type\": \"application/json\"\n        }\n    };\n    //Request body\n    const body = JSON.stringify({username,email,password});\n\n    axios.post(\"http://localhost:5000/users/add\", body, config)\n        .then((res: any) => dispatch({\n            type: REGISTER_SUCCESS,\n            //send user and token data\n            payload: res.data,\n        }))\n        .catch((err: any) => {\n            dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n            dispatch({\n                type: REGISTER_FAIL,\n            })\n        }) \n}\n\n\n\n//Check token & load user on reload\n//call dispatch to make asynchronous requests\nexport const loadUser = () => (dispatch: any, getState: any) => {\n    //User loading\n    dispatch({type: USER_LOADING});\n\n    axios.get(\"/auth/user\", tokenConfig(getState)).then((res: any) => {\n        dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        })\n        .catch((err:any) => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            })\n        })\n    })\n}\n\n//Login\nexport const login = ({email,password}: registrationData) => (dispatch: any) => {\n    //Headers\n    const config = {\n        headers: {\n            \"Content-type\": \"application/json\"\n        }\n    };\n    //Request body\n    const body = JSON.stringify({email,password});\n\n    axios.post(\"http://localhost:5000/auth/\", body, config)\n        .then((res: any) => dispatch({\n            type: REGISTER_SUCCESS,\n            //send user and token data\n            payload: res.data,\n        }))\n        .catch((err: any) => {\n            dispatch(returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\"));\n            dispatch({\n                type: LOGIN_FAIL,\n            })\n        }) \n}\n\n\n//Logout \n\nexport const logout = () => {\n    return{\n        type: LOGOUT_SUCCESS\n    }\n} \n\n\n\n\n//Setup config/headers and token (authentication process)\nexport const tokenConfig = (getState: any)  => {\n    \n    //Get token from localStorage\n    const token = getState().auth.token;\n\n    //Set Headers\n    const config: any = {\n        headers: {\n            \"Content-type\": \"application/json\"\n        }\n    }\n\n    //If token exists, add to headers\n    if(token) {\n        config.headers[\"x-auth-token\"] = token;\n    }\n\n    //return the config\n    return config;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//Django Auth\n// import axios from \"axios\";\n\n// export const AUTH_START = \"AUTH_START\";\n// export const AUTH_SUCCESS = \"AUTH_SUCESS\";\n// export const AUTH_FAIL = \"AUTH_FAIL\";\n// export const AUTH_LOGOUT = \"AUTH_LOGOUT\";\n\n\n// export const authStart = () => {\n//     return {\n//         type: AUTH_START,\n//     }\n// }\n\n// export const authSuccess = (token: any) => {\n//     return {\n//         type: AUTH_SUCCESS,\n//         token: token,\n//     }\n// }\n\n// export const authFail = (error: any) => {\n//     return {\n//         type: AUTH_FAIL,\n//         error: error,\n//     }\n// }\n\n// //logout function. Removes and resets items in local storage\n// export const logout = () => {\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"expirationDate\")\n// }\n\n// //To trigger logout after a certain period of time of inactivity\n// export const checkAuthTimeout = (expirationTime: number) => {\n//     return (dispatch: any) => {\n//         setTimeout(()=> {\n//             dispatch(logout());\n//         }, expirationTime * 1000)\n//     }\n// }\n\n// //Signup for first-timers\n// export const authSignup = (email: string, username: string, password1: string | number, password2: string | number) => {\n//     return (dispatch: any) => {\n//         dispatch(authStart());\n//         //post new user to server\n//         axios.post(\"http://127.0.0.1:8000/rest-auth/registration\", {\n//             email: email,\n//             username: username,\n//             password1: password1,\n//             password2: password2,\n//         })\n//         .then(res => {\n//             //create a token for the new user\n//             const token = res.data.key;\n//             //create a timestamp for when tehy logged in\n//             const newDate = new Date();\n//             const expirationDate: any = new Date(newDate.getTime() + 3600*1000);\n//             //store in local storage so refresh doesnt rest login status\n//             localStorage.setItem(\"token\", token);\n//             localStorage.setItem(\"expirationDate\", expirationDate);\n//             dispatch(authSuccess(token));\n//             dispatch(checkAuthTimeout(3600));\n//         })\n//         .catch(error => {\n//             //handle errors with the authFail function\n//             dispatch(authFail(error))\n//         })\n//     }\n// }\n\n// export const authLogin = (username: string, password: string | number) => {\n//     // \"() => async\" having this infront of (dispatch: any) caused the function to not startã€€\n//     return (dispatch: any) => {\n//         //authStart makes \"loading\" true\n//         console.log(\"Authentication started\")\n//         dispatch(authStart());\n//         axios.post(\"http://127.0.0.1:8000/rest-auth/login/\", {\n//             username: username,\n//             password: password\n//         })\n//         .then(res => {\n//             const token = res.data.key;\n//             const newDate = new Date();\n//             const expirationDate: any = new Date(newDate.getTime() + 3600*1000);\n//             localStorage.setItem(\"token\", token);\n//             localStorage.setItem(\"expirationDate\", expirationDate);\n//             console.log(token);\n//             dispatch(authSuccess(token));\n//             dispatch(checkAuthTimeout(3600));\n//         })\n//         .catch(error => {\n//             dispatch(authFail(error))\n//         })\n//     }\n// }\n\n// export const authLogout = () => {\n//     return {\n//         type: AUTH_LOGOUT,\n//     }\n// }\n\n// export const authCheckState = () => {\n//     return () => async(dispatch: any) => {\n//         const token = localStorage.getItem(\"token\");\n//         if (token === undefined){\n//             dispatch(logout());\n//         }\n//         else {\n//             const storageDate: any = localStorage.getItem(\"expirationDate\")\n//             const expirationDate: any = new Date(storageDate);\n//             if (expirationDate <= new Date()){\n//                 dispatch(logout());\n//             }\n//             else{\n//                 dispatch(authSuccess(token));\n//                 dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime())/1000));\n//             }\n//         }\n//     }\n// }\n\n"]},"metadata":{},"sourceType":"module"}